esphome:
  name: espresso-mill

esp8266:
  board: d1_mini

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

logger:
api:
ota:

sensor:
  - platform: homeassistant
    id: time_single
    entity_id: input_number.espresso_mill_time_single
    accuracy_decimals: 2
  - platform: homeassistant
    id: time_double
    entity_id: input_number.espresso_mill_time_double
    accuracy_decimals: 2
  - platform: homeassistant
    id: time_tripple
    entity_id: input_number.espresso_mill_time_tripple
    accuracy_decimals: 2

switch:
  - platform: gpio
    pin: GPIO04
    id: mill
    name: Espresso Mill
    icon: mdi:coffee-maker

binary_sensor:
  - platform: gpio
    pin: GPIO15
    id: button
    on_multi_click:
      # Manual ON
      - timing:
          - ON for at least 0.5s
        then:
          - logger.log: "Manual ON"
          - switch.turn_on: mill
      # Manual OFF
      - timing:
          - ON for at least 0.5s
          - OFF for at least 0s
        then:
          - logger.log: "Manual OFF"
          - switch.turn_off: mill
      # Single
      - timing:
          - ON for at most 0.5s
          - OFF for at least 1s
        then:
          - if:
              condition:
                - switch.is_on: mill
              then:
                - logger.log: "CANCEL"
                - switch.turn_off: mill
              else:
                - logger.log:
                    format: "START Single [%.2fs]"
                    args: [ 'id(time_single).state' ]
                - switch.turn_on: mill
                - delay: !lambda 'return id(time_single).state * 1000;'
                - switch.turn_off: mill
                - logger.log: "END Single"
      # Double
      - timing:
          - ON for at most 0.5s
          - OFF for at most 1s
          - ON for at most 0.5s
          - OFF for at least 1s
        then:
          - if:
              condition:
                - switch.is_on: mill
              then:
                - logger.log: "CANCEL"
                - switch.turn_off: mill
              else:
                - logger.log:
                    format: "START Double [%.2fs]"
                    args: [ 'id(time_double).state' ]
                - switch.turn_on: mill
                - delay: !lambda 'return id(time_double).state * 1000;'
                - switch.turn_off: mill
                - logger.log: "END Double"
      # Tripple
      - timing:
          - ON for at most 0.5s
          - OFF for at most 1s
          - ON for at most 0.5s
          - OFF for at most 1s
          - ON for at most 0.5s
          - OFF for at least 1s
        then:
          - if:
              condition:
                - switch.is_on: mill
              then:
                - logger.log: "CANCEL"
                - switch.turn_off: mill
              else:
                - logger.log:
                    format: "START Tripple [%.2fs]"
                    args: [ 'id(time_tripple).state' ]
                - switch.turn_on: mill
                - delay: !lambda 'return id(time_tripple).state * 1000;'
                - switch.turn_off: mill
                - logger.log: "END Tripple"
